# Dockerfile to build aria2 Windows binary using ubuntu mingw-w64
# cross compiler chain.
#
# $ sudo docker build -t aria2-mingw - < Dockerfile.mingw
#
# After successful build, windows binary is located at '/aria2/src/aria2c.exe'.
# You can copy the binary using following commands:
#
# $ id=$(sudo docker create aria2-mingw)
# $ sudo docker cp $id:/aria2/src/aria2c.exe <dest>
# $ sudo docker rm -v $id

FROM ubuntu:20.04

LABEL MAINTAINER="Tatsuhiro Tsujikawa"

# Choose 'i686-w64-mingw32' to build 32-bit binary or 'x86_64-w64-mingw32' to build 64-bit.
ENV HOST i686-w64-mingw32
# ENV HOST x86_64-w64-mingw32

## It would be better to use nearest ubuntu archive mirror for faster downloads.
# RUN echo "deb http://archive.ubuntu.com/ubuntu/ focal main restricted universe multiverse" > /etc/apt/sources.list && \
#     echo "deb http://archive.ubuntu.com/ubuntu/ focal-updates main restricted universe multiverse" >> /etc/apt/sources.list && \
#     echo "deb http://archive.ubuntu.com/ubuntu/ focal-backports main restricted universe multiverse" >> /etc/apt/sources.list && \
#     echo "deb http://security.ubuntu.com/ubuntu/ focal-security main restricted universe multiverse" >> /etc/apt/sources.list

## You may also manually set preferred DNS server.
# RUN echo "nameserver 1.1.1.1" > /etc/resolv.conf

RUN DEBIAN_FRONTEND=noninteractive && \
    apt-get update && \ 
    apt install -y tzdata

RUN apt-get update && \
    apt-get install -y \
        make binutils autoconf automake autotools-dev libtool \
        pkg-config git curl dpkg-dev gcc-mingw-w64 g++-mingw-w64 \
        autopoint libcppunit-dev libxml2-dev libgcrypt20-dev lzip

RUN curl -L -O https://gmplib.org/download/gmp/gmp-6.2.0.tar.lz && \
    curl -L -O https://github.com/libexpat/libexpat/releases/download/R_2_2_9/expat-2.2.9.tar.bz2 && \
    curl -L -O https://www.sqlite.org/2020/sqlite-autoconf-3330000.tar.gz && \
    curl -L -O http://zlib.net/zlib-1.2.11.tar.gz && \
    curl -L -O https://c-ares.haxx.se/download/c-ares-1.16.1.tar.gz && \
    curl -L -O https://www.libssh2.org/download/libssh2-1.9.0.tar.gz

RUN tar xf gmp-6.2.0.tar.lz && \
    cd gmp-6.2.0 && \
    ./configure \
        --disable-shared \
        --enable-static \
        --prefix=/usr/local/$HOST \
        --host=$HOST \
        --disable-cxx \
        --enable-fat \
        CFLAGS="-mtune=generic -O2 -g0" && \
    make install -j$(nproc)

RUN tar xf expat-2.2.9.tar.bz2 && \
    cd expat-2.2.9 && \
    ./configure \
        --disable-shared \
        --enable-static \
        --prefix=/usr/local/$HOST \
        --host=$HOST \
        --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` && \
    make install -j$(nproc)

RUN tar xf sqlite-autoconf-3330000.tar.gz && \
    cd sqlite-autoconf-3330000 && \
    ./configure \
        --disable-shared \
        --enable-static \
        --prefix=/usr/local/$HOST \
        --host=$HOST \
        --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` && \
    make install -j$(nproc)

RUN tar xf zlib-1.2.11.tar.gz && \
    cd zlib-1.2.11 && \
    CC=$HOST-gcc \
    AR=$HOST-ar \
    LD=$HOST-ld \
    RANLIB=$HOST-ranlib \
    STRIP=$HOST-strip \
    ./configure \
        --prefix=/usr/local/$HOST \
        --libdir=/usr/local/$HOST/lib \
        --includedir=/usr/local/$HOST/include \
        --static && \
    make install -j$(nproc)

RUN tar xf c-ares-1.16.1.tar.gz && \
    cd c-ares-1.16.1 && \
    ./configure \
        --disable-shared \
        --enable-static \
        --without-random \
        --prefix=/usr/local/$HOST \
        --host=$HOST \
        --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` \
        LIBS="-lws2_32" && \
    make install -j$(nproc)

RUN tar xf libssh2-1.9.0.tar.gz && \
    cd libssh2-1.9.0 && \
    ./configure \
        --disable-shared \
        --enable-static \
        --prefix=/usr/local/$HOST \
        --host=$HOST \
        --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` \
        --without-openssl \
        --with-wincng \
        LIBS="-lws2_32" && \
    make install -j$(nproc)

# ADD https://api.github.com/repos/aria2/aria2/git/refs/heads/master version.json

## You may compile the latest master branch or a certain release
# Build master branch
RUN git clone https://github.com/aria2/aria2.git && \
    cd aria2 && \
    autoreconf -i && ./mingw-config && \
    make -j$(nproc) && \
    $HOST-strip src/aria2c.exe

## Build from release
# RUN curl -L -O https://github.com/aria2/aria2/releases/download/release-1.35.0/aria2-1.35.0.tar.gz && \
#     tar xf aria2-1.35.0.tar.gz && \
#     cd aria2-1.35.0 && \
#     autoreconf -i && ./mingw-config && \
#     make -j$(nproc) && \
#     $HOST-strip src/aria2c.exe
